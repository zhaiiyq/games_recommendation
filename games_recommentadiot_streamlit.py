import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏: —Ñ–æ–Ω, —à—Ä–∏—Ñ—Ç, –Ω–µ–æ–Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap');

    html, body, .stApp {
        background-color: #0d0d1a;
        background-image: url('https://raw.githubusercontent.com/zhaiiyq/games-recommendation/main/minecraft-cherry.gif');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        font-family: 'Orbitron', sans-serif;
        color: #e0e0e0;
    }

    h1, h2, h3, h4, h5, h6 {
        font-family: 'Orbitron', sans-serif;
        color: #00ffff;
        text-shadow: 0 0 5px #00ffff, 0 0 10px #00ffff;
    }

    .stTextInput > div > div > input {
        background-color: #1e1e2f;
        color: #00ffff;
        border: 1px solid #00ffff;
    }

    .stSelectbox > div > div > div > div {
        background-color: #1e1e2f;
        color: #00ffff;
    }

    .stTabs [data-baseweb="tab"] {
        background-color: #1e1e2f;
        border-radius: 10px 10px 0 0;
        color: #00ffff;
    }

    .stButton > button {
        background-color: #00ffff;
        color: #000000;
        font-weight: bold;
        border-radius: 10px;
        transition: 0.3s;
    }

    .stButton > button:hover {
        background-color: #00cccc;
        color: #000000;
    }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
@st.cache_data
def load_data(uploaded_file):
    df = pd.read_csv(uploaded_file)
    df['–ù–∞–∑–≤–∞–Ω–∏–µ'] = df['–ù–∞–∑–≤–∞–Ω–∏–µ'].fillna('')
    df['–û–ø–∏—Å–∞–Ω–∏–µ'] = df['–û–ø–∏—Å–∞–Ω–∏–µ'].fillna('')
    df['–ñ–∞–Ω—Ä—ã'] = df['–ñ–∞–Ω—Ä—ã'].fillna('')
    df['–¶–µ–Ω–∞'] = df['–¶–µ–Ω–∞'].fillna('')
    df['–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'] = df['–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'].fillna('')
    
    # –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –≤–∞–∂–Ω–µ–µ, –ñ–∞–Ω—Ä—ã ‚Äî —Ç–æ–∂–µ –≤–µ—Å–æ–º—ã–µ
    df['features'] = (
        df['–ù–∞–∑–≤–∞–Ω–∏–µ'] * 3 + ' ' +
        df['–ñ–∞–Ω—Ä—ã'] * 2 + ' ' +
        df['–û–ø–∏—Å–∞–Ω–∏–µ'] + ' ' +
        df['–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫']
    )
    
    return df

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
@st.cache_data
def search_recommendation(df, query, top_n=10):
    vectorizer = TfidfVectorizer(stop_words='english', ngram_range=(1, 2))
    tfidf_matrix = vectorizer.fit_transform(df['features'])
    
    query_vec = vectorizer.transform([query])
    cosine_sim = cosine_similarity(query_vec, tfidf_matrix).flatten()
    top_indices = cosine_sim.argsort()[-top_n:][::-1]
    
    results = df.iloc[top_indices][['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ñ–∞–Ω—Ä—ã', '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¶–µ–Ω–∞']].copy()
    results['–°—Ö–æ–¥—Å—Ç–≤–æ'] = cosine_sim[top_indices]
    return results

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ç–æ–≤–∞—Ä—É
@st.cache_data
def recommend(df, title, num_recommendations=5):
    indices = pd.Series(df.index, index=df['–ù–∞–∑–≤–∞–Ω–∏–µ']).drop_duplicates()
    if title not in indices:
        return pd.DataFrame()
    
    idx = indices[title]
    vectorizer = TfidfVectorizer(stop_words='english', ngram_range=(1, 2))
    tfidf_matrix = vectorizer.fit_transform(df['features'])
    
    sim_scores = list(enumerate(cosine_similarity(tfidf_matrix[idx], tfidf_matrix).flatten()))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:num_recommendations+1]
    game_indices = [i[0] for i in sim_scores]
    results = df.iloc[game_indices][['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ñ–∞–Ω—Ä—ã', '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–¶–µ–Ω–∞']].copy()
    results['–°—Ö–æ–¥—Å—Ç–≤–æ'] = [sim_scores[i][1] for i in range(len(sim_scores))]
    
    return results

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.markdown("<h1 style='text-align: center;'>üéÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∏–≥—Ä</h1>", unsafe_allow_html=True)


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Streamlit
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏–≥—Ä–∞–º–∏ (CSV)", type=["csv"])

if uploaded_file:
    df = load_data(uploaded_file)

    tab1, tab2 = st.tabs(["–ü–æ–∏—Å–∫", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"])

    with tab1:
        st.markdown("<h2>üîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É</h2>", unsafe_allow_html=True)

        query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'open world shooter'):")
        if query:
            results = search_recommendation(df, query)
            st.write(results)

    with tab2:
        st.header("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä—É")
        selected_title = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", df['–ù–∞–∑–≤–∞–Ω–∏–µ'].unique())
        if selected_title:
            recommendations = recommend(df, selected_title)
            st.write(recommendations)


